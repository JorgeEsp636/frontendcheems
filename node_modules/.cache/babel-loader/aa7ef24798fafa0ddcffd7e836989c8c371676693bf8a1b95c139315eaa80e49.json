{"ast":null,"code":"const ADMIN_CREDENTIALS = {\n  email: 'jorgemoreno062006@gmail.com',\n  password: '12345678'\n};\nconst authService = {\n  async login(email, password) {\n    // Verificar si es el administrador\n    if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\n      return {\n        email: email,\n        username: 'Administrador',\n        role: 'admin'\n      };\n    }\n\n    // Para otros usuarios\n    return {\n      email: email,\n      username: email.split('@')[0],\n      role: 'user'\n    };\n  },\n  async register(userData) {\n    // No permitir registro con el email del administrador\n    if (userData.email === ADMIN_CREDENTIALS.email) {\n      throw new Error('Este correo electr칩nico no est치 disponible');\n    }\n    return {\n      email: userData.email,\n      username: userData.username,\n      role: 'user'\n    };\n  },\n  async logout() {\n    // No es necesario hacer nada en el logout\n  },\n  isAuthenticated() {\n    return true;\n  },\n  isAdmin(user) {\n    return user && user.role === 'admin';\n  }\n};\nexport default authService;","map":{"version":3,"names":["ADMIN_CREDENTIALS","email","password","authService","login","username","role","split","register","userData","Error","logout","isAuthenticated","isAdmin","user"],"sources":["C:/Users/espit/Desktop/frontend/src/services/authService.js"],"sourcesContent":["const ADMIN_CREDENTIALS = {\r\n    email: 'jorgemoreno062006@gmail.com',\r\n    password: '12345678'\r\n};\r\n\r\nconst authService = {\r\n    async login(email, password) {\r\n        // Verificar si es el administrador\r\n        if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\r\n            return {\r\n                email: email,\r\n                username: 'Administrador',\r\n                role: 'admin'\r\n            };\r\n        }\r\n        \r\n        // Para otros usuarios\r\n        return {\r\n            email: email,\r\n            username: email.split('@')[0],\r\n            role: 'user'\r\n        };\r\n    },\r\n\r\n    async register(userData) {\r\n        // No permitir registro con el email del administrador\r\n        if (userData.email === ADMIN_CREDENTIALS.email) {\r\n            throw new Error('Este correo electr칩nico no est치 disponible');\r\n        }\r\n        \r\n        return {\r\n            email: userData.email,\r\n            username: userData.username,\r\n            role: 'user'\r\n        };\r\n    },\r\n\r\n    async logout() {\r\n        // No es necesario hacer nada en el logout\r\n    },\r\n\r\n    isAuthenticated() {\r\n        return true;\r\n    },\r\n\r\n    isAdmin(user) {\r\n        return user && user.role === 'admin';\r\n    }\r\n};\r\n\r\nexport default authService; "],"mappings":"AAAA,MAAMA,iBAAiB,GAAG;EACtBC,KAAK,EAAE,6BAA6B;EACpCC,QAAQ,EAAE;AACd,CAAC;AAED,MAAMC,WAAW,GAAG;EAChB,MAAMC,KAAKA,CAACH,KAAK,EAAEC,QAAQ,EAAE;IACzB;IACA,IAAID,KAAK,KAAKD,iBAAiB,CAACC,KAAK,IAAIC,QAAQ,KAAKF,iBAAiB,CAACE,QAAQ,EAAE;MAC9E,OAAO;QACHD,KAAK,EAAEA,KAAK;QACZI,QAAQ,EAAE,eAAe;QACzBC,IAAI,EAAE;MACV,CAAC;IACL;;IAEA;IACA,OAAO;MACHL,KAAK,EAAEA,KAAK;MACZI,QAAQ,EAAEJ,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC7BD,IAAI,EAAE;IACV,CAAC;EACL,CAAC;EAED,MAAME,QAAQA,CAACC,QAAQ,EAAE;IACrB;IACA,IAAIA,QAAQ,CAACR,KAAK,KAAKD,iBAAiB,CAACC,KAAK,EAAE;MAC5C,MAAM,IAAIS,KAAK,CAAC,4CAA4C,CAAC;IACjE;IAEA,OAAO;MACHT,KAAK,EAAEQ,QAAQ,CAACR,KAAK;MACrBI,QAAQ,EAAEI,QAAQ,CAACJ,QAAQ;MAC3BC,IAAI,EAAE;IACV,CAAC;EACL,CAAC;EAED,MAAMK,MAAMA,CAAA,EAAG;IACX;EAAA,CACH;EAEDC,eAAeA,CAAA,EAAG;IACd,OAAO,IAAI;EACf,CAAC;EAEDC,OAAOA,CAACC,IAAI,EAAE;IACV,OAAOA,IAAI,IAAIA,IAAI,CAACR,IAAI,KAAK,OAAO;EACxC;AACJ,CAAC;AAED,eAAeH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}