{"ast":null,"code":"import api from './api';\nconst authService = {\n  async login(email, password) {\n    try {\n      console.log('Intentando iniciar sesión con:', {\n        email\n      });\n      const response = await api.post('/api/auth/token/', {\n        email,\n        password\n      });\n      console.log('Respuesta del servidor:', response.data);\n      if (response.data.access) {\n        localStorage.setItem('token', response.data.access);\n        localStorage.setItem('refreshToken', response.data.refresh);\n        return {\n          email: response.data.email,\n          username: response.data.username,\n          role: response.data.role || 'user'\n        };\n      }\n      throw new Error('No se recibió token de acceso');\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response2, _error$response2$data, _error$response3, _error$response3$data;\n      console.error('Error en login:', error);\n      if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.email) {\n        throw new Error(error.response.data.email[0]);\n      }\n      if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.detail) {\n        throw new Error(error.response.data.detail);\n      }\n      if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.non_field_errors) {\n        throw new Error(error.response.data.non_field_errors[0]);\n      }\n      throw new Error('Error de conexión con el servidor');\n    }\n  },\n  async register(userData) {\n    try {\n      console.log('Intentando registrar usuario:', {\n        email: userData.email\n      });\n      const response = await api.post('/api/auth/register/', userData);\n      console.log('Respuesta del registro:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data, _error$response5, _error$response5$data, _error$response6, _error$response6$data;\n      console.error('Error en registro:', error);\n      if ((_error$response4 = error.response) !== null && _error$response4 !== void 0 && (_error$response4$data = _error$response4.data) !== null && _error$response4$data !== void 0 && _error$response4$data.email) {\n        throw new Error(error.response.data.email[0]);\n      }\n      if ((_error$response5 = error.response) !== null && _error$response5 !== void 0 && (_error$response5$data = _error$response5.data) !== null && _error$response5$data !== void 0 && _error$response5$data.username) {\n        throw new Error(error.response.data.username[0]);\n      }\n      if ((_error$response6 = error.response) !== null && _error$response6 !== void 0 && (_error$response6$data = _error$response6.data) !== null && _error$response6$data !== void 0 && _error$response6$data.detail) {\n        throw new Error(error.response.data.detail);\n      }\n      throw new Error('Error de conexión con el servidor');\n    }\n  },\n  async logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n  },\n  async refreshToken() {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) throw new Error('No refresh token');\n      const response = await api.post('/api/auth/token/refresh/', {\n        refresh: refreshToken\n      });\n      if (response.data.access) {\n        localStorage.setItem('token', response.data.access);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error al refrescar token:', error);\n      this.logout();\n      throw error;\n    }\n  },\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","authService","login","email","password","console","log","response","post","data","access","localStorage","setItem","refresh","username","role","Error","error","_error$response","_error$response$data","_error$response2","_error$response2$data","_error$response3","_error$response3$data","detail","non_field_errors","register","userData","_error$response4","_error$response4$data","_error$response5","_error$response5$data","_error$response6","_error$response6$data","logout","removeItem","refreshToken","getItem","isAuthenticated"],"sources":["C:/Users/espit/Desktop/frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst authService = {\r\n    async login(email, password) {\r\n        try {\r\n            console.log('Intentando iniciar sesión con:', { email });\r\n            const response = await api.post('/api/auth/token/', {\r\n                email,\r\n                password,\r\n            });\r\n            console.log('Respuesta del servidor:', response.data);\r\n            \r\n            if (response.data.access) {\r\n                localStorage.setItem('token', response.data.access);\r\n                localStorage.setItem('refreshToken', response.data.refresh);\r\n                return {\r\n                    email: response.data.email,\r\n                    username: response.data.username,\r\n                    role: response.data.role || 'user'\r\n                };\r\n            }\r\n            throw new Error('No se recibió token de acceso');\r\n        } catch (error) {\r\n            console.error('Error en login:', error);\r\n            if (error.response?.data?.email) {\r\n                throw new Error(error.response.data.email[0]);\r\n            }\r\n            if (error.response?.data?.detail) {\r\n                throw new Error(error.response.data.detail);\r\n            }\r\n            if (error.response?.data?.non_field_errors) {\r\n                throw new Error(error.response.data.non_field_errors[0]);\r\n            }\r\n            throw new Error('Error de conexión con el servidor');\r\n        }\r\n    },\r\n\r\n    async register(userData) {\r\n        try {\r\n            console.log('Intentando registrar usuario:', { email: userData.email });\r\n            const response = await api.post('/api/auth/register/', userData);\r\n            console.log('Respuesta del registro:', response.data);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error en registro:', error);\r\n            if (error.response?.data?.email) {\r\n                throw new Error(error.response.data.email[0]);\r\n            }\r\n            if (error.response?.data?.username) {\r\n                throw new Error(error.response.data.username[0]);\r\n            }\r\n            if (error.response?.data?.detail) {\r\n                throw new Error(error.response.data.detail);\r\n            }\r\n            throw new Error('Error de conexión con el servidor');\r\n        }\r\n    },\r\n\r\n    async logout() {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refreshToken');\r\n    },\r\n\r\n    async refreshToken() {\r\n        try {\r\n            const refreshToken = localStorage.getItem('refreshToken');\r\n            if (!refreshToken) throw new Error('No refresh token');\r\n\r\n            const response = await api.post('/api/auth/token/refresh/', {\r\n                refresh: refreshToken,\r\n            });\r\n            \r\n            if (response.data.access) {\r\n                localStorage.setItem('token', response.data.access);\r\n            }\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al refrescar token:', error);\r\n            this.logout();\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    isAuthenticated() {\r\n        return !!localStorage.getItem('token');\r\n    }\r\n};\r\n\r\nexport default authService; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,WAAW,GAAG;EAChB,MAAMC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACzB,IAAI;MACAC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE;QAAEH;MAAM,CAAC,CAAC;MACxD,MAAMI,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,kBAAkB,EAAE;QAChDL,KAAK;QACLC;MACJ,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,QAAQ,CAACE,IAAI,CAAC;MAErD,IAAIF,QAAQ,CAACE,IAAI,CAACC,MAAM,EAAE;QACtBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,MAAM,CAAC;QACnDC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEL,QAAQ,CAACE,IAAI,CAACI,OAAO,CAAC;QAC3D,OAAO;UACHV,KAAK,EAAEI,QAAQ,CAACE,IAAI,CAACN,KAAK;UAC1BW,QAAQ,EAAEP,QAAQ,CAACE,IAAI,CAACK,QAAQ;UAChCC,IAAI,EAAER,QAAQ,CAACE,IAAI,CAACM,IAAI,IAAI;QAChC,CAAC;MACL;MACA,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IACpD,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA;MACZlB,OAAO,CAACY,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,KAAAC,eAAA,GAAID,KAAK,CAACV,QAAQ,cAAAW,eAAA,gBAAAC,oBAAA,GAAdD,eAAA,CAAgBT,IAAI,cAAAU,oBAAA,eAApBA,oBAAA,CAAsBhB,KAAK,EAAE;QAC7B,MAAM,IAAIa,KAAK,CAACC,KAAK,CAACV,QAAQ,CAACE,IAAI,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC;MACjD;MACA,KAAAiB,gBAAA,GAAIH,KAAK,CAACV,QAAQ,cAAAa,gBAAA,gBAAAC,qBAAA,GAAdD,gBAAA,CAAgBX,IAAI,cAAAY,qBAAA,eAApBA,qBAAA,CAAsBG,MAAM,EAAE;QAC9B,MAAM,IAAIR,KAAK,CAACC,KAAK,CAACV,QAAQ,CAACE,IAAI,CAACe,MAAM,CAAC;MAC/C;MACA,KAAAF,gBAAA,GAAIL,KAAK,CAACV,QAAQ,cAAAe,gBAAA,gBAAAC,qBAAA,GAAdD,gBAAA,CAAgBb,IAAI,cAAAc,qBAAA,eAApBA,qBAAA,CAAsBE,gBAAgB,EAAE;QACxC,MAAM,IAAIT,KAAK,CAACC,KAAK,CAACV,QAAQ,CAACE,IAAI,CAACgB,gBAAgB,CAAC,CAAC,CAAC,CAAC;MAC5D;MACA,MAAM,IAAIT,KAAK,CAAC,mCAAmC,CAAC;IACxD;EACJ,CAAC;EAED,MAAMU,QAAQA,CAACC,QAAQ,EAAE;IACrB,IAAI;MACAtB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE;QAAEH,KAAK,EAAEwB,QAAQ,CAACxB;MAAM,CAAC,CAAC;MACvE,MAAMI,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,qBAAqB,EAAEmB,QAAQ,CAAC;MAChEtB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,QAAQ,CAACE,IAAI,CAAC;MACrD,OAAOF,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MAAA,IAAAW,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA;MACZ5B,OAAO,CAACY,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,KAAAW,gBAAA,GAAIX,KAAK,CAACV,QAAQ,cAAAqB,gBAAA,gBAAAC,qBAAA,GAAdD,gBAAA,CAAgBnB,IAAI,cAAAoB,qBAAA,eAApBA,qBAAA,CAAsB1B,KAAK,EAAE;QAC7B,MAAM,IAAIa,KAAK,CAACC,KAAK,CAACV,QAAQ,CAACE,IAAI,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC;MACjD;MACA,KAAA2B,gBAAA,GAAIb,KAAK,CAACV,QAAQ,cAAAuB,gBAAA,gBAAAC,qBAAA,GAAdD,gBAAA,CAAgBrB,IAAI,cAAAsB,qBAAA,eAApBA,qBAAA,CAAsBjB,QAAQ,EAAE;QAChC,MAAM,IAAIE,KAAK,CAACC,KAAK,CAACV,QAAQ,CAACE,IAAI,CAACK,QAAQ,CAAC,CAAC,CAAC,CAAC;MACpD;MACA,KAAAkB,gBAAA,GAAIf,KAAK,CAACV,QAAQ,cAAAyB,gBAAA,gBAAAC,qBAAA,GAAdD,gBAAA,CAAgBvB,IAAI,cAAAwB,qBAAA,eAApBA,qBAAA,CAAsBT,MAAM,EAAE;QAC9B,MAAM,IAAIR,KAAK,CAACC,KAAK,CAACV,QAAQ,CAACE,IAAI,CAACe,MAAM,CAAC;MAC/C;MACA,MAAM,IAAIR,KAAK,CAAC,mCAAmC,CAAC;IACxD;EACJ,CAAC;EAED,MAAMkB,MAAMA,CAAA,EAAG;IACXvB,YAAY,CAACwB,UAAU,CAAC,OAAO,CAAC;IAChCxB,YAAY,CAACwB,UAAU,CAAC,cAAc,CAAC;EAC3C,CAAC;EAED,MAAMC,YAAYA,CAAA,EAAG;IACjB,IAAI;MACA,MAAMA,YAAY,GAAGzB,YAAY,CAAC0B,OAAO,CAAC,cAAc,CAAC;MACzD,IAAI,CAACD,YAAY,EAAE,MAAM,IAAIpB,KAAK,CAAC,kBAAkB,CAAC;MAEtD,MAAMT,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,0BAA0B,EAAE;QACxDK,OAAO,EAAEuB;MACb,CAAC,CAAC;MAEF,IAAI7B,QAAQ,CAACE,IAAI,CAACC,MAAM,EAAE;QACtBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,MAAM,CAAC;MACvD;MACA,OAAOH,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACZZ,OAAO,CAACY,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,IAAI,CAACiB,MAAM,CAAC,CAAC;MACb,MAAMjB,KAAK;IACf;EACJ,CAAC;EAEDqB,eAAeA,CAAA,EAAG;IACd,OAAO,CAAC,CAAC3B,YAAY,CAAC0B,OAAO,CAAC,OAAO,CAAC;EAC1C;AACJ,CAAC;AAED,eAAepC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}