{"ast":null,"code":"import api from './api';\nconst authService = {\n  async login(email, password) {\n    try {\n      console.log('Intentando iniciar sesión con:', {\n        email\n      });\n      const response = await api.post('/api/token/', {\n        email,\n        password\n      });\n      console.log('Respuesta del servidor:', response.data);\n      if (response.data.access) {\n        localStorage.setItem('token', response.data.access);\n        localStorage.setItem('refreshToken', response.data.refresh);\n        return {\n          ...response.data,\n          role: response.data.role || 'user'\n        };\n      }\n      throw new Error('No se recibió token de acceso');\n    } catch (error) {\n      console.error('Error en login:', error);\n      if (error.response) {\n        console.error('Detalles del error:', error.response.data);\n        throw new Error(error.response.data.detail || 'Error al iniciar sesión');\n      }\n      throw new Error('Error de conexión con el servidor');\n    }\n  },\n  async register(userData) {\n    try {\n      console.log('Intentando registrar usuario:', {\n        email: userData.email\n      });\n      const response = await api.post('/api/register/', userData);\n      console.log('Respuesta del registro:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error en registro:', error);\n      if (error.response) {\n        console.error('Detalles del error:', error.response.data);\n        throw new Error(error.response.data.detail || 'Error al registrar usuario');\n      }\n      throw new Error('Error de conexión con el servidor');\n    }\n  },\n  async logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n  },\n  async refreshToken() {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) throw new Error('No refresh token');\n      const response = await api.post('/api/token/refresh/', {\n        refresh: refreshToken\n      });\n      if (response.data.access) {\n        localStorage.setItem('token', response.data.access);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error al refrescar token:', error);\n      this.logout();\n      throw error;\n    }\n  },\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","authService","login","email","password","console","log","response","post","data","access","localStorage","setItem","refresh","role","Error","error","detail","register","userData","logout","removeItem","refreshToken","getItem","isAuthenticated"],"sources":["C:/Users/espit/Desktop/frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst authService = {\r\n    async login(email, password) {\r\n        try {\r\n            console.log('Intentando iniciar sesión con:', { email });\r\n            const response = await api.post('/api/token/', {\r\n                email,\r\n                password,\r\n            });\r\n            console.log('Respuesta del servidor:', response.data);\r\n            \r\n            if (response.data.access) {\r\n                localStorage.setItem('token', response.data.access);\r\n                localStorage.setItem('refreshToken', response.data.refresh);\r\n                return {\r\n                    ...response.data,\r\n                    role: response.data.role || 'user'\r\n                };\r\n            }\r\n            throw new Error('No se recibió token de acceso');\r\n        } catch (error) {\r\n            console.error('Error en login:', error);\r\n            if (error.response) {\r\n                console.error('Detalles del error:', error.response.data);\r\n                throw new Error(error.response.data.detail || 'Error al iniciar sesión');\r\n            }\r\n            throw new Error('Error de conexión con el servidor');\r\n        }\r\n    },\r\n\r\n    async register(userData) {\r\n        try {\r\n            console.log('Intentando registrar usuario:', { email: userData.email });\r\n            const response = await api.post('/api/register/', userData);\r\n            console.log('Respuesta del registro:', response.data);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error en registro:', error);\r\n            if (error.response) {\r\n                console.error('Detalles del error:', error.response.data);\r\n                throw new Error(error.response.data.detail || 'Error al registrar usuario');\r\n            }\r\n            throw new Error('Error de conexión con el servidor');\r\n        }\r\n    },\r\n\r\n    async logout() {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refreshToken');\r\n    },\r\n\r\n    async refreshToken() {\r\n        try {\r\n            const refreshToken = localStorage.getItem('refreshToken');\r\n            if (!refreshToken) throw new Error('No refresh token');\r\n\r\n            const response = await api.post('/api/token/refresh/', {\r\n                refresh: refreshToken,\r\n            });\r\n            \r\n            if (response.data.access) {\r\n                localStorage.setItem('token', response.data.access);\r\n            }\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al refrescar token:', error);\r\n            this.logout();\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    isAuthenticated() {\r\n        return !!localStorage.getItem('token');\r\n    }\r\n};\r\n\r\nexport default authService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}