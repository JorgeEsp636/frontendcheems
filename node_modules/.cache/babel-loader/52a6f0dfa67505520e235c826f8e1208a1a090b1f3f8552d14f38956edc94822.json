{"ast":null,"code":"const ADMIN_CREDENTIALS = {\n  email: 'jorgemoreno062006@gmail.com',\n  password: '12345678'\n};\nexport const login = async (email, password) => {\n  console.log('Login attempt:', {\n    email,\n    password\n  });\n  console.log('Admin credentials:', ADMIN_CREDENTIALS);\n\n  // Verificar si es el administrador\n  if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\n    console.log('Login exitoso como administrador');\n    return {\n      email: email,\n      name: 'Administrador',\n      role: 'admin'\n    };\n  }\n\n  // Para otros usuarios, permitir cualquier email/contraseña\n  if (email && password) {\n    console.log('Login exitoso como usuario normal');\n    return {\n      email: email,\n      name: email.split('@')[0],\n      role: 'user'\n    };\n  }\n  console.log('Login fallido');\n  throw new Error('Credenciales inválidas');\n};\nexport const register = async userData => {\n  console.log('Register attempt:', userData);\n\n  // No permitir registro con el email del administrador\n  if (userData.email === ADMIN_CREDENTIALS.email) {\n    throw new Error('Este correo electrónico no está disponible');\n  }\n\n  // Validar que los campos requeridos estén presentes\n  if (!userData.email || !userData.username || !userData.password) {\n    throw new Error('Todos los campos son requeridos');\n  }\n  console.log('Registro exitoso');\n  return {\n    email: userData.email,\n    name: userData.username,\n    role: 'user'\n  };\n};\nexport const logout = () => {\n  console.log('Logout');\n};\nexport const isAuthenticated = () => {\n  return true;\n};\nexport const isAdmin = user => {\n  return user && user.role === 'admin';\n};","map":{"version":3,"names":["ADMIN_CREDENTIALS","email","password","login","console","log","name","role","split","Error","register","userData","username","logout","isAuthenticated","isAdmin","user"],"sources":["C:/Users/espit/Desktop/frontend/src/services/authService.js"],"sourcesContent":["const ADMIN_CREDENTIALS = {\r\n    email: 'jorgemoreno062006@gmail.com',\r\n    password: '12345678'\r\n};\r\n\r\nexport const login = async (email, password) => {\r\n    console.log('Login attempt:', { email, password });\r\n    console.log('Admin credentials:', ADMIN_CREDENTIALS);\r\n\r\n    // Verificar si es el administrador\r\n    if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\r\n        console.log('Login exitoso como administrador');\r\n        return {\r\n            email: email,\r\n            name: 'Administrador',\r\n            role: 'admin'\r\n        };\r\n    }\r\n    \r\n    // Para otros usuarios, permitir cualquier email/contraseña\r\n    if (email && password) {\r\n        console.log('Login exitoso como usuario normal');\r\n        return {\r\n            email: email,\r\n            name: email.split('@')[0],\r\n            role: 'user'\r\n        };\r\n    }\r\n\r\n    console.log('Login fallido');\r\n    throw new Error('Credenciales inválidas');\r\n};\r\n\r\nexport const register = async (userData) => {\r\n    console.log('Register attempt:', userData);\r\n\r\n    // No permitir registro con el email del administrador\r\n    if (userData.email === ADMIN_CREDENTIALS.email) {\r\n        throw new Error('Este correo electrónico no está disponible');\r\n    }\r\n    \r\n    // Validar que los campos requeridos estén presentes\r\n    if (!userData.email || !userData.username || !userData.password) {\r\n        throw new Error('Todos los campos son requeridos');\r\n    }\r\n\r\n    console.log('Registro exitoso');\r\n    return {\r\n        email: userData.email,\r\n        name: userData.username,\r\n        role: 'user'\r\n    };\r\n};\r\n\r\nexport const logout = () => {\r\n    console.log('Logout');\r\n};\r\n\r\nexport const isAuthenticated = () => {\r\n    return true;\r\n};\r\n\r\nexport const isAdmin = (user) => {\r\n    return user && user.role === 'admin';\r\n}; "],"mappings":"AAAA,MAAMA,iBAAiB,GAAG;EACtBC,KAAK,EAAE,6BAA6B;EACpCC,QAAQ,EAAE;AACd,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOF,KAAK,EAAEC,QAAQ,KAAK;EAC5CE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE;IAAEJ,KAAK;IAAEC;EAAS,CAAC,CAAC;EAClDE,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEL,iBAAiB,CAAC;;EAEpD;EACA,IAAIC,KAAK,KAAKD,iBAAiB,CAACC,KAAK,IAAIC,QAAQ,KAAKF,iBAAiB,CAACE,QAAQ,EAAE;IAC9EE,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAC/C,OAAO;MACHJ,KAAK,EAAEA,KAAK;MACZK,IAAI,EAAE,eAAe;MACrBC,IAAI,EAAE;IACV,CAAC;EACL;;EAEA;EACA,IAAIN,KAAK,IAAIC,QAAQ,EAAE;IACnBE,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAChD,OAAO;MACHJ,KAAK,EAAEA,KAAK;MACZK,IAAI,EAAEL,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACzBD,IAAI,EAAE;IACV,CAAC;EACL;EAEAH,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAC5B,MAAM,IAAII,KAAK,CAAC,wBAAwB,CAAC;AAC7C,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EACxCP,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEM,QAAQ,CAAC;;EAE1C;EACA,IAAIA,QAAQ,CAACV,KAAK,KAAKD,iBAAiB,CAACC,KAAK,EAAE;IAC5C,MAAM,IAAIQ,KAAK,CAAC,4CAA4C,CAAC;EACjE;;EAEA;EACA,IAAI,CAACE,QAAQ,CAACV,KAAK,IAAI,CAACU,QAAQ,CAACC,QAAQ,IAAI,CAACD,QAAQ,CAACT,QAAQ,EAAE;IAC7D,MAAM,IAAIO,KAAK,CAAC,iCAAiC,CAAC;EACtD;EAEAL,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAC/B,OAAO;IACHJ,KAAK,EAAEU,QAAQ,CAACV,KAAK;IACrBK,IAAI,EAAEK,QAAQ,CAACC,QAAQ;IACvBL,IAAI,EAAE;EACV,CAAC;AACL,CAAC;AAED,OAAO,MAAMM,MAAM,GAAGA,CAAA,KAAM;EACxBT,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;AACzB,CAAC;AAED,OAAO,MAAMS,eAAe,GAAGA,CAAA,KAAM;EACjC,OAAO,IAAI;AACf,CAAC;AAED,OAAO,MAAMC,OAAO,GAAIC,IAAI,IAAK;EAC7B,OAAOA,IAAI,IAAIA,IAAI,CAACT,IAAI,KAAK,OAAO;AACxC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}